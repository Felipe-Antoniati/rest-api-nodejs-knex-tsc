{
  "title": "Escopo utilizado no Desenvolvimento desta API",
  
  "serverSetup": {
    "step_one":{
      "actionDescription": "Iniciar Arquivo package.json",
      "executedCode":"npm init -y"
    },
    "step_two":{
      "actionDescription": "Instalar Dependências.",
      "executedCode":"npm i -s express cors helmet http"
    },
    "step_three":{
      "actionDescription": "Instalar Dependências de Desenvolvimento.",
      "executedCode":"npm i -D typescript @types/express @types/cors @types/helmet ts-node-dev"
    },
    "step_four":{
      "actionDescription": "Criar Pasta para armazenar estrutura da API.",
      "executedCode":"mkdir src"
    },
    "step_five":{
      "actionDescription": "Iniciar Arquivo de Configurações do Typescript.",
      "executedCode":"tsc --init"
    },
    "step_six":{
      "actionDescription": "Criar Arquivo padrão para o Servidor e Estruturar o código.",
      "executedCode":"touch src/server.ts && code"
    },
    "step_seven":{
      "actionDescription": "Criar Arquivo padrão para as Rotas e Estruturar o código.",
      "executedCode":"touch src/routes.ts && code"
    },
    "step_height":{
      "actionDescription": "Criar Script de inicialização.",
      "executedCode":"tsnd --transpile-only --ignore-watch node_modules --respawn src/server.ts"
    },
    "step_nine":{
      "actionDescription": "Iniciar Servidor",
      "executedCode":"npm run dev"
    }
  },
  "databaseSetup":{
    "step_one":{
      "actionDescription": "Criar pasta para armazenar estrutura da Base de dados.",
      "executedCode":"cd src && mkdir database"
    },
    "step_two":{
      "actionDescription": "Instalar Dependências.",
      "executedCode":"knex sqlite3"
    },
    "step_three":{
      "actionDescription": "Criar Arquivo de conexão com à Base de Dados e Estruturar o código.",
      "executedCode":"touch src/database/connections.ts && code" 
    },
    "step_four":{
      "actionDescription": "Criar Script de Migração.",
      "executedCode":"knex --knexfile knexfile.ts migrate:latest"
    },
    "step_five":{
      "actionDescription": "Atribuir o caminho das migrações no Arquivo com o ambiente de desenvolvimento local.",
      "executedCode":""
    },
    "step_six":{
      "actionDescription": "Realizar as Migrações das Tabelas para à Base de dados.",
      "executedCode":"directory: path.resolve(__dirname, 'src', 'database', 'migrations')"
    }
  },

  "controllersSetup":{
    "step_one":{
      "actionDescription": "Criar pasta para armazenar os controladores.",
      "executedCode":"cd src && mkdir controllers"
    },
    "step_two":{
      "actionDescription": "Criar Arquivos de CRUD das entidades e Estruturar o código.",
      "executedCode":"touch src/controllers/nameController.ts && code"
    },
    "step_four":{
      "actionDescription": "Atribuir os controladores à Rotas especificas.",
      "executedCode":"import nameController from '../controllers/nameController"
    },
    "step_five":{
      "actionDescription": "Testar Rotas utilizando o Insomnia.",
      "executedCode":"http:/localhost:port/resource -> SEND"
    }
  },
  "validationSetup":{
    "step_one":{
      "actionDescription":"Instalar Dependências.",
      "executedCode":"celebrate"
    },
    "step_two":{
      "actionDescription":"Abstrair o caminho das Rotas.",
      "executedCode":"cd src && mkdir routes"
    },
    "step_three":{
      "actionDescription":"Estruturar o código de Validação nas Rotas.",
      "executedCode":"import { celebrate, Joi, Segments } from 'celebrate';"
    },
    "step_four":{
      "actionDescription":"Atribuir respostas de erros de Validação ao Servidor.",
      "executedCode":"import { errors } from 'celebrate';"
    }
  },
  "jwtSetup":{
    "step_one":{
      "actionDescription":"Instalar Dependências",
      "executedCode":"npm install --save jsonwebtoken"
    },
    "step_two":{
      "actionDescription":"Instalar Dependências de Desenvolvimento",
      "executedCode":"npm install -D @types/jsonwebtoken"
    },
    "step_three":{
      "actionDescription":"Criar função para gerar o Token ",
      "executedCode":"mkdir src/utils && touch src/utils/generateToken.ts"
    },
    "step_four":{
      "actionDescription":"Criar Controlador de Autenticação e Estruturar o código.",
      "executedCode":"touch src/controllers/nameController.ts && code"
    },
    "step_five":{
      "actionDescription":"Criar Middleware de Autorização",
      "executedCode":"mkdir src/middlewares && touch src/middlewares/checkToken.ts"
    }
  }
}